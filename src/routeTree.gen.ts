/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as TestImport } from './routes/test'
import { Route as SignupImport } from './routes/signup'
import { Route as LoginImport } from './routes/login'
import { Route as AuthenticatedRouteImport } from './routes/_authenticated/route'
import { Route as IndexImport } from './routes/index'
import { Route as AuthenticatedProjectsImport } from './routes/_authenticated/projects'
import { Route as AuthenticatedProjectProjectIdRouteImport } from './routes/_authenticated/project/$projectId/route'
import { Route as AuthenticatedProjectProjectIdIndexImport } from './routes/_authenticated/project/$projectId/index'
import { Route as AuthenticatedProjectProjectIdSettingsImport } from './routes/_authenticated/project/$projectId/settings'
import { Route as AuthenticatedProjectProjectIdKanbanViewImport } from './routes/_authenticated/project/$projectId/kanbanView'
import { Route as AuthenticatedProjectProjectIdAiPortalImport } from './routes/_authenticated/project/$projectId/ai-portal'

// Create/Update Routes

const TestRoute = TestImport.update({
  id: '/test',
  path: '/test',
  getParentRoute: () => rootRoute,
} as any)

const SignupRoute = SignupImport.update({
  id: '/signup',
  path: '/signup',
  getParentRoute: () => rootRoute,
} as any)

const LoginRoute = LoginImport.update({
  id: '/login',
  path: '/login',
  getParentRoute: () => rootRoute,
} as any)

const AuthenticatedRouteRoute = AuthenticatedRouteImport.update({
  id: '/_authenticated',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const AuthenticatedProjectsRoute = AuthenticatedProjectsImport.update({
  id: '/projects',
  path: '/projects',
  getParentRoute: () => AuthenticatedRouteRoute,
} as any)

const AuthenticatedProjectProjectIdRouteRoute =
  AuthenticatedProjectProjectIdRouteImport.update({
    id: '/project/$projectId',
    path: '/project/$projectId',
    getParentRoute: () => AuthenticatedRouteRoute,
  } as any)

const AuthenticatedProjectProjectIdIndexRoute =
  AuthenticatedProjectProjectIdIndexImport.update({
    id: '/',
    path: '/',
    getParentRoute: () => AuthenticatedProjectProjectIdRouteRoute,
  } as any)

const AuthenticatedProjectProjectIdSettingsRoute =
  AuthenticatedProjectProjectIdSettingsImport.update({
    id: '/settings',
    path: '/settings',
    getParentRoute: () => AuthenticatedProjectProjectIdRouteRoute,
  } as any)

const AuthenticatedProjectProjectIdKanbanViewRoute =
  AuthenticatedProjectProjectIdKanbanViewImport.update({
    id: '/kanbanView',
    path: '/kanbanView',
    getParentRoute: () => AuthenticatedProjectProjectIdRouteRoute,
  } as any)

const AuthenticatedProjectProjectIdAiPortalRoute =
  AuthenticatedProjectProjectIdAiPortalImport.update({
    id: '/ai-portal',
    path: '/ai-portal',
    getParentRoute: () => AuthenticatedProjectProjectIdRouteRoute,
  } as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/_authenticated': {
      id: '/_authenticated'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof AuthenticatedRouteImport
      parentRoute: typeof rootRoute
    }
    '/login': {
      id: '/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof LoginImport
      parentRoute: typeof rootRoute
    }
    '/signup': {
      id: '/signup'
      path: '/signup'
      fullPath: '/signup'
      preLoaderRoute: typeof SignupImport
      parentRoute: typeof rootRoute
    }
    '/test': {
      id: '/test'
      path: '/test'
      fullPath: '/test'
      preLoaderRoute: typeof TestImport
      parentRoute: typeof rootRoute
    }
    '/_authenticated/projects': {
      id: '/_authenticated/projects'
      path: '/projects'
      fullPath: '/projects'
      preLoaderRoute: typeof AuthenticatedProjectsImport
      parentRoute: typeof AuthenticatedRouteImport
    }
    '/_authenticated/project/$projectId': {
      id: '/_authenticated/project/$projectId'
      path: '/project/$projectId'
      fullPath: '/project/$projectId'
      preLoaderRoute: typeof AuthenticatedProjectProjectIdRouteImport
      parentRoute: typeof AuthenticatedRouteImport
    }
    '/_authenticated/project/$projectId/ai-portal': {
      id: '/_authenticated/project/$projectId/ai-portal'
      path: '/ai-portal'
      fullPath: '/project/$projectId/ai-portal'
      preLoaderRoute: typeof AuthenticatedProjectProjectIdAiPortalImport
      parentRoute: typeof AuthenticatedProjectProjectIdRouteImport
    }
    '/_authenticated/project/$projectId/kanbanView': {
      id: '/_authenticated/project/$projectId/kanbanView'
      path: '/kanbanView'
      fullPath: '/project/$projectId/kanbanView'
      preLoaderRoute: typeof AuthenticatedProjectProjectIdKanbanViewImport
      parentRoute: typeof AuthenticatedProjectProjectIdRouteImport
    }
    '/_authenticated/project/$projectId/settings': {
      id: '/_authenticated/project/$projectId/settings'
      path: '/settings'
      fullPath: '/project/$projectId/settings'
      preLoaderRoute: typeof AuthenticatedProjectProjectIdSettingsImport
      parentRoute: typeof AuthenticatedProjectProjectIdRouteImport
    }
    '/_authenticated/project/$projectId/': {
      id: '/_authenticated/project/$projectId/'
      path: '/'
      fullPath: '/project/$projectId/'
      preLoaderRoute: typeof AuthenticatedProjectProjectIdIndexImport
      parentRoute: typeof AuthenticatedProjectProjectIdRouteImport
    }
  }
}

// Create and export the route tree

interface AuthenticatedProjectProjectIdRouteRouteChildren {
  AuthenticatedProjectProjectIdAiPortalRoute: typeof AuthenticatedProjectProjectIdAiPortalRoute
  AuthenticatedProjectProjectIdKanbanViewRoute: typeof AuthenticatedProjectProjectIdKanbanViewRoute
  AuthenticatedProjectProjectIdSettingsRoute: typeof AuthenticatedProjectProjectIdSettingsRoute
  AuthenticatedProjectProjectIdIndexRoute: typeof AuthenticatedProjectProjectIdIndexRoute
}

const AuthenticatedProjectProjectIdRouteRouteChildren: AuthenticatedProjectProjectIdRouteRouteChildren =
  {
    AuthenticatedProjectProjectIdAiPortalRoute:
      AuthenticatedProjectProjectIdAiPortalRoute,
    AuthenticatedProjectProjectIdKanbanViewRoute:
      AuthenticatedProjectProjectIdKanbanViewRoute,
    AuthenticatedProjectProjectIdSettingsRoute:
      AuthenticatedProjectProjectIdSettingsRoute,
    AuthenticatedProjectProjectIdIndexRoute:
      AuthenticatedProjectProjectIdIndexRoute,
  }

const AuthenticatedProjectProjectIdRouteRouteWithChildren =
  AuthenticatedProjectProjectIdRouteRoute._addFileChildren(
    AuthenticatedProjectProjectIdRouteRouteChildren,
  )

interface AuthenticatedRouteRouteChildren {
  AuthenticatedProjectsRoute: typeof AuthenticatedProjectsRoute
  AuthenticatedProjectProjectIdRouteRoute: typeof AuthenticatedProjectProjectIdRouteRouteWithChildren
}

const AuthenticatedRouteRouteChildren: AuthenticatedRouteRouteChildren = {
  AuthenticatedProjectsRoute: AuthenticatedProjectsRoute,
  AuthenticatedProjectProjectIdRouteRoute:
    AuthenticatedProjectProjectIdRouteRouteWithChildren,
}

const AuthenticatedRouteRouteWithChildren =
  AuthenticatedRouteRoute._addFileChildren(AuthenticatedRouteRouteChildren)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '': typeof AuthenticatedRouteRouteWithChildren
  '/login': typeof LoginRoute
  '/signup': typeof SignupRoute
  '/test': typeof TestRoute
  '/projects': typeof AuthenticatedProjectsRoute
  '/project/$projectId': typeof AuthenticatedProjectProjectIdRouteRouteWithChildren
  '/project/$projectId/ai-portal': typeof AuthenticatedProjectProjectIdAiPortalRoute
  '/project/$projectId/kanbanView': typeof AuthenticatedProjectProjectIdKanbanViewRoute
  '/project/$projectId/settings': typeof AuthenticatedProjectProjectIdSettingsRoute
  '/project/$projectId/': typeof AuthenticatedProjectProjectIdIndexRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '': typeof AuthenticatedRouteRouteWithChildren
  '/login': typeof LoginRoute
  '/signup': typeof SignupRoute
  '/test': typeof TestRoute
  '/projects': typeof AuthenticatedProjectsRoute
  '/project/$projectId/ai-portal': typeof AuthenticatedProjectProjectIdAiPortalRoute
  '/project/$projectId/kanbanView': typeof AuthenticatedProjectProjectIdKanbanViewRoute
  '/project/$projectId/settings': typeof AuthenticatedProjectProjectIdSettingsRoute
  '/project/$projectId': typeof AuthenticatedProjectProjectIdIndexRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/_authenticated': typeof AuthenticatedRouteRouteWithChildren
  '/login': typeof LoginRoute
  '/signup': typeof SignupRoute
  '/test': typeof TestRoute
  '/_authenticated/projects': typeof AuthenticatedProjectsRoute
  '/_authenticated/project/$projectId': typeof AuthenticatedProjectProjectIdRouteRouteWithChildren
  '/_authenticated/project/$projectId/ai-portal': typeof AuthenticatedProjectProjectIdAiPortalRoute
  '/_authenticated/project/$projectId/kanbanView': typeof AuthenticatedProjectProjectIdKanbanViewRoute
  '/_authenticated/project/$projectId/settings': typeof AuthenticatedProjectProjectIdSettingsRoute
  '/_authenticated/project/$projectId/': typeof AuthenticatedProjectProjectIdIndexRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | ''
    | '/login'
    | '/signup'
    | '/test'
    | '/projects'
    | '/project/$projectId'
    | '/project/$projectId/ai-portal'
    | '/project/$projectId/kanbanView'
    | '/project/$projectId/settings'
    | '/project/$projectId/'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | ''
    | '/login'
    | '/signup'
    | '/test'
    | '/projects'
    | '/project/$projectId/ai-portal'
    | '/project/$projectId/kanbanView'
    | '/project/$projectId/settings'
    | '/project/$projectId'
  id:
    | '__root__'
    | '/'
    | '/_authenticated'
    | '/login'
    | '/signup'
    | '/test'
    | '/_authenticated/projects'
    | '/_authenticated/project/$projectId'
    | '/_authenticated/project/$projectId/ai-portal'
    | '/_authenticated/project/$projectId/kanbanView'
    | '/_authenticated/project/$projectId/settings'
    | '/_authenticated/project/$projectId/'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  AuthenticatedRouteRoute: typeof AuthenticatedRouteRouteWithChildren
  LoginRoute: typeof LoginRoute
  SignupRoute: typeof SignupRoute
  TestRoute: typeof TestRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  AuthenticatedRouteRoute: AuthenticatedRouteRouteWithChildren,
  LoginRoute: LoginRoute,
  SignupRoute: SignupRoute,
  TestRoute: TestRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/_authenticated",
        "/login",
        "/signup",
        "/test"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/_authenticated": {
      "filePath": "_authenticated/route.tsx",
      "children": [
        "/_authenticated/projects",
        "/_authenticated/project/$projectId"
      ]
    },
    "/login": {
      "filePath": "login.tsx"
    },
    "/signup": {
      "filePath": "signup.tsx"
    },
    "/test": {
      "filePath": "test.tsx"
    },
    "/_authenticated/projects": {
      "filePath": "_authenticated/projects.tsx",
      "parent": "/_authenticated"
    },
    "/_authenticated/project/$projectId": {
      "filePath": "_authenticated/project/$projectId/route.tsx",
      "parent": "/_authenticated",
      "children": [
        "/_authenticated/project/$projectId/ai-portal",
        "/_authenticated/project/$projectId/kanbanView",
        "/_authenticated/project/$projectId/settings",
        "/_authenticated/project/$projectId/"
      ]
    },
    "/_authenticated/project/$projectId/ai-portal": {
      "filePath": "_authenticated/project/$projectId/ai-portal.tsx",
      "parent": "/_authenticated/project/$projectId"
    },
    "/_authenticated/project/$projectId/kanbanView": {
      "filePath": "_authenticated/project/$projectId/kanbanView.tsx",
      "parent": "/_authenticated/project/$projectId"
    },
    "/_authenticated/project/$projectId/settings": {
      "filePath": "_authenticated/project/$projectId/settings.tsx",
      "parent": "/_authenticated/project/$projectId"
    },
    "/_authenticated/project/$projectId/": {
      "filePath": "_authenticated/project/$projectId/index.tsx",
      "parent": "/_authenticated/project/$projectId"
    }
  }
}
ROUTE_MANIFEST_END */
